
pipeline {   
  agent any
  stages{
      stage("Hello stage") {           
          steps { 
              script {
                def verifyCall = load("/home/myeung/git/cicdutils/vars/verify.groovy")
                verifyCall("Please verify this call.")
              
              }
          }       
      }
  }
}


//calling local class
pipeline {   
  agent any
  stages{
      stage ("source") {
          steps {
            echo 'testing to call groovy class in local machine.' 
          }
      }
      stage("Loading stage") {           
          steps { 
              script {
                def classCall = load("/home/myeung/git/cicdutils/src/com/openshift/util/CicdUtils.groovy")
                classCall.gBuild(this, "Please verify this call.")
              }

          }       
      }
  }
}


/*************calling with environment and parameters **************/
@Library('cicdutils@master')_

pipeline {   
  agent any
  parameters {
    string(name:'UserId', defaultValue:'-userId value-', description: 'used for testing')
  }
  environment {
    TIMEZONE = "eastern"
  }
  stages{
      stage ("source") {
          steps {
            echo 'testing to call groovy class in local machine: ${params.UserId} ${TIMEZONE}' 
          }
      }
      stage("Loading stage") {           
          steps { 
              script {
                def classCall = load("/home/myeung/git/cicdutils/src/com/openshift/global/util/Tester.groovy")
                classCall("Please verify this Tester call.", this)

              }
          }       
      }
  }
}


/***********  multistage to library development *******************/
@Library('cicdutils@master')_

pipeline {   
  agent any
  tools {
    maven 'maven-3'
    jdk 'jdk1.8.0'
  }
  parameters {
    string(name:'UserId', defaultValue:'-userId value-', description: 'used for testing')
  }
  environment {
    TIMEZONE = "eastern"
  }
  stages{
       stage('checkout git') {
            steps {
                git 'https://github.com/myeung18/cicdutils'
            }
        }
      stage('build') {
          steps {
              sh 'cd fisdemoaccount ; mvn clean '
              sh 'ls -list'
          }
      }
      stage ('test') {
          steps {
              sh "ls -last"
          }
      }
      stage('deploy developmentServer'){
          steps {
              sh "ls -last"
          }
      }
      stage('deploy staging'){
          steps {
              sh "ls -last"
          }
      }
      stage('deploy production'){
          steps {
              sh "ls -last"
          }
      }
      stage("Loading stage") {           
          steps { 
              script {
                def classCall = load("/home/myeung/git/cicdutils/src/com/openshift/global/util/Tester.groovy")
                classCall("Please verify this Tester call.", this)

              }
          }
      }

  } //stages
  post {
      failure {
          echo " some stage failed "
          echo " mail to: params.UserId, subject: 'Pipeline failed', body: "
      }
  }  
}


/*********************************************************/
@Library('cicdutils@master')_
def osUtil = new com.openshift.global.util.FullPipe()

pipeline {
    agent any
    tools {
        maven 'maven-3'
        jdk 'jdk1.8.0'
        oc 'oc'
    }
    stages {
        stage("Set OpenShift resurces creation") {
            steps {
                script {
                    def libCall = load("/home/myeung/git/cicdutils/src/com/openshift/global/util/FullPipe.groovy")
                    libCall.preparationWork()
                }
            }
        }
        stage('Checkout source codes') {
            steps {
                script { 
                    //git 'https://github.com/myeung18/fuse-financial-cicd.git'
                    def libCall = load("/home/myeung/git/cicdutils/src/com/openshift/global/util/FullPipe.groovy")
                    libCall.checkOutSourceCode()
                }
            }
        }
        stage("Build and Test") {
            steps {
                script {
                    def libCall = load("/home/myeung/git/cicdutils/src/com/openshift/global/util/FullPipe.groovy")
                    libCall.buildAndTest()    
                }
            }
        }
    }
    post {
        success {
            print "***************successful******************"
        }
        failure {
            print "failure occurred."
        }
        aborted {
            print "aborted it is weirded!"
        }
    }    
}



//user input with menu to select
//https://stackoverflow.com/questions/47080683/read-interactive-input-in-jenkins-pipeline-to-a-variable
stage('Wait for user to input text?') {
    steps {
        script {
             def userInput = input(id: 'userInput', message: 'Merge to?',
             parameters: [[$class: 'ChoiceParameterDefinition', defaultValue: 'strDef', 
                description:'describing choices', name:'nameChoice', choices: "QA\nUAT\nProduction\nDevelop\nMaster"]
             ])

            println(userInput); //Use this value to branch to different logic if needed
        }
    }

}
